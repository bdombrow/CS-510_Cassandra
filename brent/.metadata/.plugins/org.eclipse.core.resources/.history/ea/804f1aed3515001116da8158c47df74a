/*
 * Brute force bridges.
 * 
 * This requires enough memory to hold:
 * 	All the nodes at once to find the highest one.
 * 	All the edges at once + three [n][n] matrices for the edges where n is the highest numbered node..
 * 
 * Set the host address and the undirected flag before running.
 * The host address can be set at runtime by passing it as the only argument.
 */

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.List;
import java.util.Stack;

import org.apache.cassandra.thrift.*;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;


public class BridgesBF {
	static String host = "localhost";
	static int port = 9160;
	static boolean undirected = false;
	// Set up decoder.
	static Charset charset = Charset.forName("UTF-8");
	static CharsetDecoder decoder = charset.newDecoder();

	public static void main(String[] args) throws Exception {

		if (args.length == 1) {
			host = args[0];
		}

		// Need to find the highest numbered node	
		int highNode = getHighNode();
		int[][] nodeList = new int[highNode][highNode];


		// Initialize, we can always get to ourself
		for (int i = 0; i < highNode; ++i) {
			nodeList[i][i] = 1; // 0 is being used as infinity.
		}
		// Get the edges
		Stack<String> edgeStack = new Stack<String>();
		getEdges(edgeStack);

		// Get the edge weights
		getWeights(nodeList);

		// Calculate the transitive closure.
		int[][] ref = (int[][]) deepCopy(nodeList);
		transC(ref);	

		// Remove each edge and see if the closure changes.
		for (String edge : edgeStack) {
			// Copy the array
			int[][] trans = (int[][]) deepCopy(nodeList);
			
			//Parse the edge into array indexes
			String[] edgeParts = edge.split("-");
			int i = Integer.parseInt(edgeParts[0])-1;
			int j = Integer.parseInt(edgeParts[1])-1;
			
			// Remove the edge
			trans[i][j] = 0;
			if (undirected) {
				trans[j][i] = 0;
			}
			
			// Calculate the transitive closure
			transC(trans);
			
			// See if it changed.
			if(transDiff(ref, trans)) {
				System.out.println("Bridge: " + edge);
			}
		}

	}
	/*
	 * Find the highest numbered node in the graph
	 * 
	 * Throws an exception if something went wrong.
	 */
	private static int getHighNode() throws Exception{
		// Set up connection.
		TTransport transport = new TFramedTransport(new TSocket(host, port));
		TProtocol protocol = new TBinaryProtocol(transport);
		Cassandra.Client client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");
		
		ByteBuffer query = ByteBuffer.wrap("SELECT key FROM Nodes;".getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);
		int high = 0;

		// Go through the results and find the highest numbered node
		for (CqlRow row : results.getRows()) {
			for (Column col : row.getColumns()) {
				String name = decoder.decode(col.name).toString();
				int value = Integer.parseInt(decoder.decode(col.value).toString());
				if (name.contentEquals("key")) {
					if (value > high) high = value;
				}
			}
		}
		transport.flush();
		transport.close();

		return high;
	}
	
	/*
	 * Print out the contents of the matrix
	 */
	@SuppressWarnings("unused")
	private static void printArray(int[][] array) {
		System.out.print("\n\t");
		for (int i = 0; i < array.length; ++i) {
			System.out.print("\t" + (i + 1) + ":");
		}
		System.out.print("\n");

		for (int i = 0; i < array.length; ++i ) {
			System.out.print((i+1) + "\t|");
			for (int j = 0; j < array.length; ++j) {
				System.out.print("\t" + array[i][j]);
			}
			System.out.print("\n");
		}
	}

	/*
	 * Check for a difference in the transitive closures
	 */
	private static boolean transDiff(int[][] ref, int[][] trans) {
		for (int i = 0; i < ref.length; ++i) {
			for (int j = 0; j < ref.length; ++j) {
				if(ref[i][j] != trans[i][j]) { // We have a bridge
					return true; 
				} 
			}
		}
	return false;
	}

	/*
	 * Calculate the transitive closure.
	 */
	private static void transC(int[][] inputArray) {
		// 0 = no path
		for (int k = 0; k < inputArray.length; ++k) {
			for (int i = 0; i < inputArray.length; ++i) {
				for (int j = 0; j < inputArray.length; ++j) {
					if (inputArray[i][k] + inputArray[k][j] == 2) { // This is a path from [i][k] to [k][j]
						inputArray[i][j] = 1;
					}
				}
			}

		}			
	}
	
	/*
	 * Get a list of all the edges from the data store.
	 * 
	 */
	private static void getEdges(Stack<String> edgeStack) throws Exception {
		// Set up connection.
		TTransport transport = new TFramedTransport(new TSocket(host, port));
		TProtocol protocol = new TBinaryProtocol(transport);
		Cassandra.Client client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");

		// Set the edge query and execute.
		String queryText;
		if (undirected) {
			queryText = "SELECT key FROM WEdges;";
		} else {
			queryText = "SELECT key FROM Edges;";
		}
		ByteBuffer query = ByteBuffer.wrap(queryText.getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);

		// Get all the edges
		List<CqlRow> rows = results.getRows();
		for (CqlRow row : rows) {
			edgeStack.push(decoder.decode(row.key).toString());
		}

		transport.flush();
		transport.close();
	}

	/*
	 * Initialize the weights
	 * 
	 */
	private static void getWeights(int[][] inputArray) throws Exception{
		// All weights are 1 since we are only concerned with bridges
		int start_node = 0;
		int end_node = 0;

		// Set up connection.
		TTransport transport = new TFramedTransport(new TSocket(host, port));
		TProtocol protocol = new TBinaryProtocol(transport);
		Cassandra.Client client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");

		// Set the edge query and execute.
		String queryText;
		if (undirected) {
			queryText = "SELECT start, end FROM WEdges;";
		} else {
			queryText = "SELECT start, end FROM Edges;";
		}
		ByteBuffer query = ByteBuffer.wrap(queryText.getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);

		// Go through all the edges and set the weights equal to 1
		List<CqlRow> rows = results.getRows();
		for (CqlRow row : rows) {
			List<Column> columns = row.getColumns();
			for (Column col : columns) {
				String colName = decoder.decode(col.name).toString();
				String colValue = decoder.decode(col.value).toString();

				if (colName.contentEquals("start")) {
					start_node = Integer.parseInt(colValue) - 1;
				}
				if (colName.contentEquals("end")){
					end_node = Integer.parseInt(colValue) - 1;
				}
			}
			inputArray[start_node][end_node] = 1;
			if (undirected) inputArray[end_node][start_node] = 1;

		}

		transport.flush();
		transport.close();
	}

	/* Object cloner taken from http://www.javaworld.com/javaworld/javatips/jw-javatip76.html?page=2
	 * 
	 * Used to make a deep copy of the nodeList
	 */

	static public Object deepCopy(Object oldObj) throws Exception
	{
		ObjectOutputStream oos = null;
		ObjectInputStream ois = null;
		try
		{
			ByteArrayOutputStream bos = 
					new ByteArrayOutputStream(); // A
			oos = new ObjectOutputStream(bos); // B
			// serialize and pass the object
			oos.writeObject(oldObj);   // C
			oos.flush();               // D
			ByteArrayInputStream bin = 
					new ByteArrayInputStream(bos.toByteArray()); // E
			ois = new ObjectInputStream(bin);                  // F
			// return the new object
			return ois.readObject(); // G
		}
		catch(Exception e)
		{
			System.out.println("Exception in ObjectCloner = " + e);
			throw(e);
		}
		finally
		{
			oos.close();
			ois.close();
		}
	}
}
