import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.ArrayList;

import org.apache.cassandra.thrift.*;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;


public class tc1 {
	public static void main(String[] args) throws Exception {
		// Set up decoder.
		Charset charset = Charset.forName("UTF-8");
		CharsetDecoder decoder = charset.newDecoder();

		// Set up connection.
		TTransport transport = new TFramedTransport(new TSocket("10.9.73.119", 9160));
		TProtocol protocol = new TBinaryProtocol(transport);
		Cassandra.Client client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");

		ByteBuffer query = ByteBuffer.wrap("SELECT start, end FROM Edges;".getBytes());

		CqlResult results = client.execute_cql_query(query, Compression.NONE);

		// Need to find the highest numbered node		
		int[][] node_list = new int[14][14];
		int start_node = 0;
		int end_node = 0;
		
		// Go through all the edges and load in the weights
		for (CqlRow row : results.getRows()) {
			for (Column col : row.getColumns()) {
				if (decoder.decode(col.name).toString().contentEquals("start")) {
					start_node = Integer.parseInt(decoder.decode(col.value).toString());
					System.out.print("\t" + "start:" + start_node);
				}
				if (decoder.decode(col.name).toString().contentEquals("end")) {
					end_node = Integer.parseInt(decoder.decode(col.value).toString());
					System.out.print(" end:" + end_node);
				}
			}
			//node_list[start_node][end_node] = 1;
			
		}
		
		for (int i = 1; i < node_list.length; ++i ) {
			for (int j = 1; j < node_list.length; ++j) {
				System.out.print("\t" + node_list[i][j]);
			}
			System.out.print("\n");
		}
		
		transport.flush();
		transport.close();
	}
}
