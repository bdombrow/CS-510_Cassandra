import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.List;
import java.util.Scanner;
import java.util.TreeSet;

import org.apache.cassandra.thrift.*;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;

public class tc1 {
	public static void main(String[] args) throws Exception {
		// Set up decoder.
		Charset charset = Charset.forName("UTF-8");
		CharsetDecoder decoder = charset.newDecoder();

		// Set up connection.
		TTransport transport = new TFramedTransport(new TSocket("10.9.73.119", 9160));
		TProtocol protocol = new TBinaryProtocol(transport);
		Cassandra.Client client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");

		// Set the parent of the column family
		ColumnParent parent = new ColumnParent();
		parent.column_family = "Edges";

		// Set the consistency level
		ConsistencyLevel consistencyLevel = ConsistencyLevel.ONE;

		// Read Entire row
		SlicePredicate predicate = new SlicePredicate();
		SliceRange range = new SliceRange();
		ByteBuffer start = ByteBuffer.allocate(0);
		ByteBuffer end = ByteBuffer.allocate(0);
		range.start = start;
		range.finish = end;
		predicate.slice_range = range;
		
		// Range query
		KeyRange keyrange = new KeyRange();
		keyrange.start_key = ByteBuffer.allocate(0);
		keyrange.end_key = ByteBuffer.wrap("999999999".getBytes());
		keyrange.count = 999999999;
		
		List<KeySlice> rangeResults = client.get_range_slices(parent, predicate, keyrange, consistencyLevel);
		
		for (KeySlice key : rangeResults) {
			System.out.println(decoder.decode(key.bufferForKey()));
			for (ColumnOrSuperColumn col : key.columns) {
				System.out.println(decoder.decode(col.column.name) + " -> " + decoder.decode(col.column.value));
			}
		}


		transport.flush();
		transport.close();
	}
}
