/*
 * Brute force bridges.
 * 
 * This thing is not memory efficient.
 */

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.List;
import java.util.Stack;
import java.util.Vector;

import org.apache.cassandra.thrift.*;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;


public class sb1 {
	static String host = "localhost";
	static int port = 9160;
	static boolean undirected = true;
	// Set up decoder.
	static Charset charset = Charset.forName("UTF-8");
	static CharsetDecoder decoder = charset.newDecoder();
	static TTransport transport;
	static TProtocol protocol;
	static Cassandra.Client client;

	public static void main(String[] args) throws Exception {
		transport = new TFramedTransport(new TSocket(host, port));
		protocol = new TBinaryProtocol(transport);
		client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");

		if (args.length == 1) {
			host = args[0];
		}

		// Get the nodes
		Vector<String> nodeVector = new Vector<String>();
		getNodes(nodeVector);
		
		// Find a spanning tree
		Vector<String> edgeVector = new Vector<String>();
		String start = nodeVector.firstElement();
		nodeVector.remove(0);
		dfs(start, nodeVector, edgeVector);
		
		System.out.println(edgeVector);

		transport.flush();
		transport.close();
	}
	
	private static void dfs(String start, Vector<String> nodes, Vector<String> edges) throws Exception {
		Vector<String> ends = new Vector<String>();
		
		// End the ends
		getEnds(start, ends);
		
		// See if there are any
		while (ends.size() != 0) {
			// Extract the first one
			String newStart = ends.firstElement();
			ends.remove(0);
			
			// See if we have been there before
			while ((!nodes.contains(newStart)) && (ends.size() != 0)) {
				// We've been there, pop it
				newStart = ends.firstElement();
				ends.remove(0);
			}
			
			if ((!nodes.contains(newStart))) {
				edges.add(start + "-" + newStart);
				dfs(newStart, nodes, edges);
			}
		}
		return;
	}
	
	private static void getEnds(String start, Vector<String> ends) throws Exception {
		// Set the edge query and execute.
		String queryText = "SELECT end from Nodes where start = " + start + ";";
		ByteBuffer query = ByteBuffer.wrap(queryText.getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);

		// Get all the edges
		List<CqlRow> rows = results.getRows();
		for (CqlRow row : rows) {
			for (Column col : row.columns) {
				String colName = decoder.decode(col.name).toString();
				String colValue = decoder.decode(col.value).toString();
				
				if (colName.contentEquals("end")) {
					ends.add(colValue);
				}
				
			}
		}
	}

	private static void printArray(int[][] array) {
		System.out.print("\n\t");
		for (int i = 0; i < array.length; ++i) {
			System.out.print("\t" + (i + 1) + ":");
		}
		System.out.print("\n");

		for (int i = 0; i < array.length; ++i ) {
			System.out.print((i+1) + "\t|");
			for (int j = 0; j < array.length; ++j) {
				System.out.print("\t" + array[i][j]);
			}
			System.out.print("\n");
		}
	}

	private static boolean transDiff(int[][] ref, int[][] trans) {
		for (int i = 0; i < ref.length; ++i) {
			for (int j = 0; j < ref.length; ++j) {
				if(ref[i][j] != trans[i][j]) { // We have a bridge
					return true; 
				} 
			}
		}
	return false;
	}

	private static void transC(int[][] inputArray) {
		// 0 = no path
		for (int k = 0; k < inputArray.length; ++k) {
			for (int i = 0; i < inputArray.length; ++i) {
				for (int j = 0; j < inputArray.length; ++j) {
					if (inputArray[i][k] + inputArray[k][j] == 2) { // This is a path from [i][k] to [k][j]
						inputArray[i][j] = 1;
					}
				}
			}

		}			
	}
	
	private static void getNodes(Vector<String> vector) throws Exception {
		// Set the edge query and execute.
		String queryText = "SELECT key from Nodes;";
		ByteBuffer query = ByteBuffer.wrap(queryText.getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);

		// Get all the edges
		List<CqlRow> rows = results.getRows();
		for (CqlRow row : rows) {
			vector.add(decoder.decode(row.key).toString());
		}
	}

	private static void getWeights(int[][] inputArray) throws Exception{
		// All weights are 1 since we are only concerned with bridges
		int start_node = 0;
		int end_node = 0;

		// Set the edge query and execute.
		String queryText;
		if (undirected) {
			queryText = "SELECT start, end FROM WEdges;";
		} else {
			queryText = "SELECT start, end FROM Edges;";
		}
		ByteBuffer query = ByteBuffer.wrap(queryText.getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);

		// Go through all the edges and set the weights equal to 1
		List<CqlRow> rows = results.getRows();
		for (CqlRow row : rows) {
			List<Column> columns = row.getColumns();
			for (Column col : columns) {
				String colName = decoder.decode(col.name).toString();
				String colValue = decoder.decode(col.value).toString();

				if (colName.contentEquals("start")) {
					start_node = Integer.parseInt(colValue) - 1;
				}
				if (colName.contentEquals("end")){
					end_node = Integer.parseInt(colValue) - 1;
				}
			}
			inputArray[start_node][end_node] = 1;
			if (undirected) inputArray[end_node][start_node] = 1;

		}
	}

	/* Object cloner taken from http://www.javaworld.com/javaworld/javatips/jw-javatip76.html?page=2
	 * 
	 */

	static public Object deepCopy(Object oldObj) throws Exception
	{
		ObjectOutputStream oos = null;
		ObjectInputStream ois = null;
		try
		{
			ByteArrayOutputStream bos = 
					new ByteArrayOutputStream(); // A
			oos = new ObjectOutputStream(bos); // B
			// serialize and pass the object
			oos.writeObject(oldObj);   // C
			oos.flush();               // D
			ByteArrayInputStream bin = 
					new ByteArrayInputStream(bos.toByteArray()); // E
			ois = new ObjectInputStream(bin);                  // F
			// return the new object
			return ois.readObject(); // G
		}
		catch(Exception e)
		{
			System.out.println("Exception in ObjectCloner = " + e);
			throw(e);
		}
		finally
		{
			oos.close();
			ois.close();
		}
	}
}
