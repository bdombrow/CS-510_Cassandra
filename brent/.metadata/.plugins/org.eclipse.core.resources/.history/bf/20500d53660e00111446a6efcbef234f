import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.util.List;

import org.apache.cassandra.thrift.*;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TTransport;
import org.apache.thrift.transport.TSocket;


public class tc2 {
	public static void main(String[] args) throws Exception {
		// Set up decoder.
		Charset charset = Charset.forName("UTF-8");
		CharsetDecoder decoder = charset.newDecoder();

		// Set up connection.
		TTransport transport = new TFramedTransport(new TSocket("10.9.73.119", 9160));
		TProtocol protocol = new TBinaryProtocol(transport);
		Cassandra.Client client = new Cassandra.Client(protocol);
		transport.open();

		// Set the keyspace we are using.
		client.set_keyspace("CDM");

		// Need to find the highest numbered node	
		int high_node = 14;
		double[][] node_list = new double[high_node][high_node];
		int start_node = 0;
		int end_node = 0;
		double weight = 0;
		
		// Initialize, we can always get to ourself
		for (int i = 0; i < high_node; ++i) {
				node_list[i][i] = 0.001;
		}
		
		// Set the edege query and execute.
		ByteBuffer query = ByteBuffer.wrap("SELECT start, end, weight FROM WEdges;".getBytes());
		CqlResult results = client.execute_cql_query(query, Compression.NONE);
		
		// Go through all the edges and set the weights equal to 1
		List<CqlRow> rows = results.getRows();
		for (CqlRow row : rows) {
			List<Column> columns = row.getColumns();
			for (Column col : columns) {
				String colName = decoder.decode(col.name).toString();
				String colValue = decoder.decode(col.value).toString();
				
				System.out.println(colName + ":" + colValue);
				if (colName.contentEquals("start")) {
					start_node = Integer.parseInt(colValue) - 1;
					System.out.println("Parsed column name start: " + start_node);
				}
				if (colName.contentEquals("end")){
					end_node = Integer.parseInt(colValue) - 1;
					System.out.println("Parsed column name end: " + end_node);
				}
				if (colName.contentEquals("weight")) {
					weight = Double.parseDouble(colValue);
					System.out.println("Pased column name weight: " + weight);
				}
			}
			node_list[start_node][end_node] = weight;
			node_list[end_node][start_node] = weight;
			
		}
				
		transport.flush();
		transport.close();
		
		// Print out what we've got.		
		System.out.print("\t");
		for (int i = 0; i < high_node; ++i) {
			System.out.print("\t" + (i+1) + ":");
		}
		System.out.print("\n");
		
		for (int i = 0; i < node_list.length; ++i ) {
			System.out.print(i + "\t|");
			for (int j = 0; j < node_list.length; ++j) {
				System.out.print("\t" + node_list[i][j]);
			}
			System.out.print("\n");
		}
		
		
		// Calculate the transitive closure.
		
		/*
		 * All paths are equal in this implementation.
		 * Paths are directed.
		 * 0 = no path.
		 */
		for (int k = 0; k < high_node; ++k) {
			for (int i = 0; i < high_node; ++i) {
				for (int j = 0; j < high_node; ++j) {
					if ((node_list[i][k] != 0) && (node_list[k][j] != 0)) { // This is a path from [i][k] to [k][j]
						if ((node_list[i][k] + node_list[k][j]) < node_list[i][j])
							node_list[i][j] = node_list[i][k] + node_list[k][j];
					}
				}
			}
		}
		
		
		// Print out the results of the closure.
		System.out.print("\n\t");
		for (int i = 0; i < high_node; ++i) {
			System.out.print("\t" + (i + 1) + ":");
		}
		System.out.print("\n");
		
		for (int i = 0; i < node_list.length; ++i ) {
			System.out.print((i+1) + "\t|");
			for (int j = 0; j < node_list.length; ++j) {
				System.out.print("\t" + node_list[i][j]);
			}
			System.out.print("\n");
		}
		

	}
}
